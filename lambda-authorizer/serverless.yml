service: test-lambda-authorizer
provider:
  name: aws
  stage: ${opt:stage, 'dev'}
  runtime: nodejs16.x
  environment:
    APP_VERSION: ${file(./package.json):version}
    APP_ENV: ${self:provider.stage}
    APP_TEST: ${file(./config/${self:provider.stage}.json):aws.test}
    CONFIG_JWT_KEY: ${file(./config/${self:provider.stage}.json):config.jwt.key}
    CONFIG_JWT_ALGORITHM: ${file(./config/${self:provider.stage}.json):config.jwt.algorithm}
    CONFIG_JWT_EXPIRATION: ${file(./config/${self:provider.stage}.json):config.jwt.expiration}
    GOOGLE_CLIENT_ID: ${file(./config/${self:provider.stage}.json):google.client_id}
    GOOGLE_CLIENT_SECRET: ${file(./config/${self:provider.stage}.json):google.client_secret}
    GOOGLE_REDIRECT_URL: ${file(./config/${self:provider.stage}.json):google.redirect_url}
    GOOGLE_SCOPES: ${file(./config/${self:provider.stage}.json):google.scopes}
    MONGODB_URL: ${file(./config/${self:provider.stage}.json):mongodb.url}
    MONGODB_DB_NAME: ${file(./config/${self:provider.stage}.json):mongodb.db.name}
    MONGODB_COLLECTION_ADMIN: ${file(./config/${self:provider.stage}.json):mongodb.collection.admin}
    MONGODB_COLLECTION_SESSIONS: ${file(./config/${self:provider.stage}.json):mongodb.collection.sessions}
    SERVICE_USERS_URL: ${file(./config/${self:provider.stage}.json):service.lambdaUsers.url}
  httpApi:
    cors: true
functions:
  sign-up:
    handler: lambda.handleHttpSignUp
    events:
      - httpApi:
          path: signup/{db}
          method: POST
  sign-in:
    handler: lambda.handleHttpSignIn
    events:
      - httpApi:
          path: signin/{db}
          method: POST
  sign-validation:
    handler: lambda.handleHttpValidation
    events:
      - httpApi:
          path: auth/{db}
          method: POST

  authorizer:
    # Make sure your file path is correct!
    # (e.g., if your file is in the root folder use server.graphqlHandler )
    # The format is: <FILENAME>.<HANDLER>
    handler: src/authorizer.authorizerHandler # highlight-line
    events:
      - httpApi:
          path: login/
          method: POST
      - httpApi:
          path: login/
          method: GET

  urlGenerator:
    # Make sure your fileurlGenerator path is correct!
    # (e.g., if your file is in the root folder use server.graphqlHandler )
    # The format is: <FILENAME>.<HANDLER>
    handler: src/media-login.mediaLoginHandler # highlight-line
    events:
      - httpApi:
          path: google/
          method: POST
      - httpApi:
          path: google/
          method: GET
# Omit the following lines if you aren't using TS!
plugins:
  - serverless-plugin-typescript
  - serverless-offline
custom:
  serverless-offline:
    httpPort: 5000
    websocketPort: 5001
    lambdaPort: 5002
